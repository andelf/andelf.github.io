<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://andelf.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://andelf.github.io/" rel="alternate" type="text/html" /><updated>2020-11-16T16:13:03+08:00</updated><id>https://andelf.github.io/feed.xml</id><title type="html">猫·仁波切</title><subtitle>会研发的PM才是好OP.</subtitle><entry><title type="html">Welcome to Jekyll!</title><link href="https://andelf.github.io/blog/2020/11/16/welcome-to-jekyll/" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2020-11-16T14:54:24+08:00</published><updated>2020-11-16T14:54:24+08:00</updated><id>https://andelf.github.io/blog/2020/11/16/welcome-to-jekyll</id><content type="html" xml:base="https://andelf.github.io/blog/2020/11/16/welcome-to-jekyll/">&lt;p&gt;是的我升级了.&lt;/p&gt;

&lt;p&gt;是的我又回来了.&lt;/p&gt;</content><author><name></name></author><category term="blog" /><summary type="html">是的我升级了.</summary></entry><entry><title type="html">迷之一键部署</title><link href="https://andelf.github.io/blog/2020/02/27/one-click/" rel="alternate" type="text/html" title="迷之一键部署" /><published>2020-02-27T14:00:00+08:00</published><updated>2020-02-27T14:00:00+08:00</updated><id>https://andelf.github.io/blog/2020/02/27/one-click</id><content type="html" xml:base="https://andelf.github.io/blog/2020/02/27/one-click/">&lt;p&gt;搞 IT 技术相关的，尤其是后端技术和分布式相关的同学，怕是不只一次听过所谓的一键部署的提法，与此相似或者相关的，可能还包括自动化部署，一键上线/回滚，以及 CI/CD 相关的持续部署，持续集成，持续交付等等概念。&lt;/p&gt;

&lt;p&gt;这里，不谈 CI/CD，只谈作为对用户产品的一键部署，无论是叫 one-click, single-click, one-key, one-press, one-button, one-command, single-command… 还是只是对外发布的某种快速部署工具(集)。部署，俗称上线，不过细究概念，上线似乎更侧重日常功能更新，而部署的概念，更侧重首次的初始环境搭建。无论何，传统上，部署都是运维(OP)同学的日常工作。&lt;/p&gt;

&lt;p&gt;所谓一键，大都是虚指。做过运维的同学知道，部署怎么可能是一件容易的事情。考虑到现代服务端软件集的庞大，从数据库/缓存，到后端逻辑，到前端服务，到监控系统，到报警系统，各组件相互配合，才完成最终对用户提供服务。更不用说机房服务器环境，云主机环境，现代分布式服务的多样和复杂性，导致 trouble shooting 极其复杂，哪怕是饱经事故的老 OP，也不容易。&lt;/p&gt;

&lt;p&gt;正因有了这些复杂性，可信赖的部署工具就更显得重要。好用的工具不只为虎添翼，还给萌新在黑夜里点了盏明灯，在产品拉新的层面更有极其重要的作用。垃圾的工具，处处是坑不说，让人骂娘的心都有，且有工具还不如没有工具。没有工具的时候，OP 拿着命令行一顿敲，不也成功部署了么？&lt;/p&gt;

&lt;p&gt;是的，关于一键部署，这里要从命令行说起。&lt;/p&gt;

&lt;h2 id=&quot;一键部署从哪来&quot;&gt;一键部署从哪来&lt;/h2&gt;

&lt;h3 id=&quot;命令行-op&quot;&gt;命令行 OP&lt;/h3&gt;

&lt;p&gt;最原始的典型服务部署过程，不过是登录到服务器，通过 scp/wget 下载到最近的软件包，解压编译，必要时候还需要下载若干编译依赖，然后修改配置，最后启动程序完成部署。&lt;/p&gt;

&lt;p&gt;潮一点的容器部署方式，拉几个容器镜像下来，加上参数 run 起来，也是略苦逼。&lt;/p&gt;

&lt;p&gt;是命令，就有可能出错，相信多数 OP 都有一个命令行小本本，记录着常见操作需要执行的命令。&lt;/p&gt;

&lt;h3 id=&quot;一键部署小脚本儿&quot;&gt;一键部署小脚本儿&lt;/h3&gt;

&lt;p&gt;看起来传统的命令行式部署很容易自动化，把这些命令集合在一起，于是就诞生了最原始的，一键部署脚本儿。脚本丢到服务器上，一执行，漫长或短暂的等待过去，服务 ready.&lt;/p&gt;

&lt;p&gt;而容器化部署，也可以自动化成 docker-compose 等待，外部包一个处理配置的脚本，依旧好使。&lt;/p&gt;

&lt;p&gt;随后 OP 同学为该脚本增加了更多的命令行参数，比如软件包版本号，部署路径，配置文件的某条常修改的参数，看起来这个时候，已经可以交付外部使用了。&lt;/p&gt;

&lt;h3 id=&quot;一键部署命令行工具集&quot;&gt;一键部署命令行工具集&lt;/h3&gt;

&lt;p&gt;然而多数服务端软件比以上流程复杂得多，OP 们往往面对的是一个集群，每台机器的配置或命令都有所不同，且服务的启停过程往往具有某种依赖顺序。这时候，简单的命令堆叠小脚本就不能满足需求了。&lt;/p&gt;

&lt;p&gt;开源届倒是提供了不少解决方案，比如 Ansible, Puppet, Chef 等待，以及若干虚拟化解决方案，实现了配置，执行，部署，交付的完整流程。此外还有若干轻量工具，靠更多的人工配置环境提供更高的自由度，例如 fabric.&lt;/p&gt;

&lt;p&gt;这时候的一键部署，可能就是某个强大工具的配置文件，描述了部署的步骤，然后加上目标机器环境的配置文件，通过执行一条命令，完成整个环境检查，环境初始化，部署应用，启动应用的全流程。&lt;/p&gt;

&lt;p&gt;例如 ansible-playbook -i inventory install.yml 这样一条命令，加载 install.yml 描述的安装流程，然后在 inverntory 指定的服务器列表上执行这些安装流程。&lt;/p&gt;

&lt;p&gt;但是这样的工具有一个很大的缺点，那就是运行异常可能需要工具的专家介入。专家大概是能给工具写插件级别的。以 Ansible 为例，能讲清楚机器登陆时候，不同发行版报错原因以及解决方法的人，并不多。&lt;/p&gt;

&lt;p&gt;对于容器化部署，那当然要诉诸于各种编排工具，不在此讨论了。&lt;/p&gt;

&lt;h3 id=&quot;一键部署-ui&quot;&gt;一键部署 UI&lt;/h3&gt;

&lt;p&gt;严格地说，命令行也是 UI 的一种，原教旨主义会告诉你，UI 就是 User Interface，就好比 explorer.exe 也是 SHELL 一样。这里说的 UI, 特指 GUI，大概包括说有的图形应用程序，尤其指浏览器 Web UI.&lt;/p&gt;

&lt;p&gt;之前在推上有句吐槽，“每个傻逼的后端产品 PM，都有一颗给命令行写 GUI 的心“，这话放在一键部署领域，依旧是合适无比。&lt;/p&gt;

&lt;p&gt;做好 UI 的第一步，大概是不做 UI.&lt;/p&gt;

&lt;p&gt;你可以认为 UI 在大部分时候是伪需求，问问自己的内心：在已经有较完善的一键部署工具集或者脚本的情况下，为什么做 UI?&lt;/p&gt;

&lt;p&gt;其实答案很简单，UI 不是给 OP 或者一线工程师用的。它目标是为了把一件事情的门槛降低到尽可能低，低到只是恰好理解这个服务是干什么有什么要素的人，也能操作。&lt;/p&gt;

&lt;p&gt;然而这是不可能的。所以所谓的你看到到的一众 UI 只能将大部分晦涩的配置选项隐藏起来，然后让你填写一个机器列表然后”一键“部署。然后失败了，弹出简洁的“部署失败”四个大字，或是晦涩的冗长的没人会去看的错误日志。&lt;/p&gt;

&lt;p&gt;迄今为止，见过可以说的上能用的一键部署 UI, 可能是 Ansible-Tower，即 Ansible AWX, 但它真的只是包装了 Ansible 的命令行，所以足够简洁，足够完备。然而它的 trouble shooting 难度依旧是 Ansible 级的。除非你对 Ansible 足够熟悉，否则还是找足够经验丰富的人去追查背后到底发生了什么错误。&lt;/p&gt;

&lt;h3 id=&quot;历史的例外&quot;&gt;历史的例外&lt;/h3&gt;

&lt;p&gt;大概会有若干种特殊情况。例如大型公司的自研（或致敬某开源项目的）内部系统，例如云平台服务商的某些自动部署工具等。共同点是，受控底层环境，用户有天然身份门槛。&lt;/p&gt;

&lt;p&gt;所以这个时候，不乏内部优秀工具或是云平台优秀工具。&lt;/p&gt;

&lt;h2 id=&quot;一键部署现状&quot;&gt;一键部署现状&lt;/h2&gt;

&lt;p&gt;然而该做不该做的东西，总是要做的。所以谈谈一键部署到底要做啥吧？这里主要谈分布式系统集群的一键部署。一个应用一个二进制文件一台机器，就真没必要折腾。&lt;/p&gt;

&lt;h3 id=&quot;inventory-管理&quot;&gt;Inventory 管理&lt;/h3&gt;

&lt;p&gt;这里的 inventory, 泛指一切目标资产，比如服务器，云主机或者虚拟机。其中的属性信息繁杂，和后续的部署过程有着强依赖，比如机器上的配置，例如磁盘空间，内存，CPU 时间等。通过 inventory 的自动检查和初始化脚本，获取各种信息，为部署过程提供方便。&lt;/p&gt;

&lt;p&gt;部分支持云主机的 Inventory 管理，还包括按需动态创建主机实例。&lt;/p&gt;

&lt;p&gt;再广义些，还可能包括外部可用的服务资源，例如公共的 redis 服务。&lt;/p&gt;

&lt;h4 id=&quot;credential-管理&quot;&gt;Credential 管理&lt;/h4&gt;

&lt;p&gt;Credential 是指登陆机器进行操作的用户权限，比如 SSH 私钥，或是机器的用户名密码，或是云平台的访问所需密钥 KEY.&lt;/p&gt;

&lt;h3 id=&quot;应用管理&quot;&gt;应用管理&lt;/h3&gt;

&lt;p&gt;所谓应用，就是将要部署的服务（往往包含多个不同子应用），它们之间通过特定的依赖关系互联，最终对外界提供服务。除核心服务应用之外，还可能包括监控应用(含报警应用)，管理应用(adminstrative dashboard)，工具应用(例如备份/恢复工具)等。&lt;/p&gt;

&lt;p&gt;应用的管理，主要是应用元信息的管理，应用之间的依赖关系管理，应用对资源的关系，应用配置管理。&lt;/p&gt;

&lt;p&gt;应用元信息的管理，往往是描述一个应用的诸如版本，二进制等等信息，往往是部署的第一步，先准备好将要部署的应用。其中涉及到产品二进制分发的问题，则是额外的话题了。&lt;/p&gt;

&lt;p&gt;应用之间依赖，应用对资源的依赖关系的管理，往往通过配置管理的形态实现。&lt;/p&gt;

&lt;h3 id=&quot;配置管理&quot;&gt;配置管理&lt;/h3&gt;

&lt;p&gt;配置管理不只包括应用配置管理，往往还包括部署的配置管理，但两者之间往往存在交叉融合的地方，比如说指定某个机器的上部署的应用 A 需要一个特殊的配置项。&lt;/p&gt;

&lt;h4 id=&quot;应用配置管理&quot;&gt;应用配置管理&lt;/h4&gt;

&lt;p&gt;管理各应用的配置参数，最终可能以配置文件，应用启动的命令行参数，或是应用的环境变量等方式存在。其中部分配置暗含各应用各部署目标机器之间的互联关系，往往是动态生成得到。例如&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;应用提供服务的端口号&lt;/li&gt;
  &lt;li&gt;应用的数据目录&lt;/li&gt;
  &lt;li&gt;应用的日志目录&lt;/li&gt;
  &lt;li&gt;某应用有两套配置，一套用于生产环境，一套应用于测试环境&lt;/li&gt;
  &lt;li&gt;某条配置项目按某种特定规律生成&lt;/li&gt;
  &lt;li&gt;某配置项目随机生成，但要求全服务集群应用的改配置项必须相同&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;部署配置管理&quot;&gt;部署配置管理&lt;/h4&gt;

&lt;p&gt;部署配置管理其实就是所部署的应用到具体的部署目标之间的映射关系。例如：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;某台机器是监控机，需要部署所有监控模块&lt;/li&gt;
  &lt;li&gt;某台机器需要打开端口 80 提供服务&lt;/li&gt;
  &lt;li&gt;某台机器的某个目录部署应用 A&lt;/li&gt;
  &lt;li&gt;某台机器的某个目录做应用 B 的数据目录&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;部署配置管理的高级形态，是声明式。即机器声明我支持某资源，由一键部署系统自动选择依赖关系。这也稍许牵扯到高级形态的部署。&lt;/p&gt;

&lt;h3 id=&quot;状态数据管理&quot;&gt;状态数据管理&lt;/h3&gt;

&lt;p&gt;应用的正常运行，不只依赖配置，往往还有若干依赖数据。传统的静态依赖数据之外，就是动态数据了，往往以数据库或是数据目录的方式存在。&lt;/p&gt;

&lt;p&gt;状态数据的管理，是整个部署届的难题。越是庞大的状态数据，在部署，环境变更，灾难恢复，以及迁移的时候就越成为问题。&lt;/p&gt;

&lt;p&gt;现代分布式系统一般通过底层分布式数据库的方式解决状态数据管理，然而这带来了一个鸡生蛋蛋生鸡的问题，底层分布式数据库的部署，又是一个状态数据管理问题。&lt;/p&gt;

&lt;p&gt;是的。我们还有分布式文件系统。233。&lt;/p&gt;

&lt;h3 id=&quot;部署管理&quot;&gt;部署管理&lt;/h3&gt;

&lt;p&gt;部署管理，即管理具体的部署操作任务。往往通过任务队列的方式实现，是整个一键部署最核心的部分。&lt;/p&gt;

&lt;p&gt;在部署过程中，尤其要提供相对较清晰的进度展示，并输出合理的操作日志供时候追查问题。&lt;/p&gt;

&lt;p&gt;部署往往也包含了变更管理，即应用版本或某依赖更新后，再次触发部署。所以部署不应是一次性任务，而是可重入任务。&lt;/p&gt;

&lt;p&gt;部署任务的触发一般提供手动和自动两种模式。所谓的“一键”就是这里点击的“部署”按钮。&lt;/p&gt;

&lt;p&gt;而自动触发，就隶属持续部署或是持续交付的范畴了，一般通过某种触发器或是任务计划实现。&lt;/p&gt;

&lt;h3 id=&quot;监控管理&quot;&gt;监控管理&lt;/h3&gt;

&lt;p&gt;服务的正常运行，离不开监控。在一键部署系统中，监控往往作为单独的应用存在，所以将之化解为另一个应用管理的问题。&lt;/p&gt;

&lt;p&gt;监控往往包括监控数据的收集，监控数据的查询展示，日志收集等问题。高级形态还包括动态调试等，加入了诊断系统的功能。&lt;/p&gt;

&lt;p&gt;监控系统一般还会提供通知(notification)的功能，报警或者状态日报信息通过通知系统发送给关注者。&lt;/p&gt;

&lt;h3 id=&quot;服务管理&quot;&gt;服务管理&lt;/h3&gt;

&lt;p&gt;服务管理相对较简单，即一个部署完成的集群，其中服务的启动，停止，删库跑路等操作。其中还可能牵扯到服务存活检测，服务自启动，服务异常自动重启(保活)等知识点。&lt;/p&gt;

&lt;p&gt;服务管理可以作为特殊的部署操作来实现，比如设定特定的部署动作，检查环境后启停对应服务。&lt;/p&gt;

&lt;h3 id=&quot;pm-们提出的其他管理&quot;&gt;PM 们提出的其他管理&lt;/h3&gt;

&lt;p&gt;如上是核心功能。然后 PM 往往会提其他需求。例如：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;权限管理：作为持久运行的变更系统，至少需要一个权限控制，尤其生成环境
    &lt;ul&gt;
      &lt;li&gt;用户管理&lt;/li&gt;
      &lt;li&gt;用户组管理&lt;/li&gt;
      &lt;li&gt;用户和用户组的权限管理&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;多应用管理：即整个一键部署工具作为通用平台&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;一键部署的将要到哪里去&quot;&gt;一键部署的将要到哪里去&lt;/h2&gt;

&lt;p&gt;一键部署，终将要被云平台或是云平台的容器编排消灭的吧。&lt;/p&gt;

&lt;p&gt;但到时候，又是给容器编排做 UI 了。&lt;/p&gt;</content><author><name></name></author><category term="blog" /><category term="ci" /><summary type="html">搞 IT 技术相关的，尤其是后端技术和分布式相关的同学，怕是不只一次听过所谓的一键部署的提法，与此相似或者相关的，可能还包括自动化部署，一键上线/回滚，以及 CI/CD 相关的持续部署，持续集成，持续交付等等概念。</summary></entry><entry><title type="html">Fix Ansible Tower: stdout capture is missing</title><link href="https://andelf.github.io/blog/2016/12/07/fix-ansible-tower-stdout-capture-is-missing/" rel="alternate" type="text/html" title="Fix Ansible Tower: stdout capture is missing" /><published>2016-12-07T16:33:20+08:00</published><updated>2016-12-07T16:33:20+08:00</updated><id>https://andelf.github.io/blog/2016/12/07/fix-ansible-tower-stdout-capture-is-missing</id><content type="html" xml:base="https://andelf.github.io/blog/2016/12/07/fix-ansible-tower-stdout-capture-is-missing/">&lt;p&gt;Ansible Tower will report &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stdout capture is missing&lt;/code&gt; when restoring from previous backup.&lt;/p&gt;

&lt;p&gt;Or run from docker?&lt;/p&gt;

&lt;p&gt;(得，不装 B 英语了)&lt;/p&gt;

&lt;p&gt;长话短说，之前要把 Ansible Tower 拆到 Docker 里，结果发现总不能正常执行。任务界面会提示：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;stdout capture is missing
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;检查发现是 celery 进程出错，用 root 启动 celery 倒是正常的。&lt;/p&gt;

&lt;p&gt;最后发现是 docker 中的 supervisord 启动时缺乏部分环境变量，解决方法：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;change supervisor/conf.d/tower.conf
ADD:
[program:awx-celeryd]
......
environment=HOME=&quot;/var/lib/awx&quot;,USER=&quot;awx&quot;
......
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;是的，为找到原因，逆向了整个 Ansible Tower。&lt;/p&gt;

&lt;p&gt;Ref: &lt;a href=&quot;https://github.com/ansible/ansible/issues/13904&quot;&gt;GitHub Issue&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="blog" /><category term="linux" /><category term="ansible" /><summary type="html">Ansible Tower will report stdout capture is missing when restoring from previous backup.</summary></entry><entry><title type="html">在 CircleCI 上使用 Rust(CircleCI meets Rust)</title><link href="https://andelf.github.io/blog/2016/11/18/circleci-meets-rust/" rel="alternate" type="text/html" title="在 CircleCI 上使用 Rust(CircleCI meets Rust)" /><published>2016-11-18T13:26:15+08:00</published><updated>2016-11-18T13:26:15+08:00</updated><id>https://andelf.github.io/blog/2016/11/18/circleci-meets-rust</id><content type="html" xml:base="https://andelf.github.io/blog/2016/11/18/circleci-meets-rust/">&lt;p&gt;最近由于频频遇到 travis-ci 的问题，主要是 Linux 资源排队、macOS 资源更需要排队，导致自动测试时间被拉长，
影响开发效率。&lt;/p&gt;

&lt;p&gt;了解到 CircleCI 是不错的替代品，所以打算迁移 Rust 项目过去。当然说起来， CircleCI 的野心更大，是要来替代 jenkins 的。&lt;/p&gt;

&lt;p&gt;目前官方支持语言其实都比较落后，包括 go 也只是 1.6 版本，但似乎不是问题，而且据介绍， CircleCI 2.0 支持自定义 build image，支持语言的版本当然不在话下。&lt;/p&gt;

&lt;p&gt;每天面对各种 IaaS, PaaS，免不了写配置是，这也是 yaml 程序员的日常。&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;pre&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;curl https://sh.rustup.rs -sSf | sh&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;override&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cargo build&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cargo test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如上。然而不 work。报错：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cargo build
    Updating registry `https://github.com/rust-lang/crates.io-index`
warning: spurious network error (2 tries remaining): [12/-12] Malformed URL 'ssh://git@github.com:/rust-lang/crates.io-index'
warning: spurious network error (1 tries remaining): [12/-12] Malformed URL 'ssh://git@github.com:/rust-lang/crates.io-index'
error: failed to fetch `https://github.com/rust-lang/crates.io-index`

To learn more, run the command again with --verbose.

cargo build returned exit code 101

Action failed: cargo build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;神了。原来， CircleCI 自作聪明在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.gitconfig&lt;/code&gt; 里修改了映射配置，强制用它自己的 ssh key 去访问 github，rewrite 了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://github.com&lt;/code&gt; 的所有仓库。
这恰恰和 cargo 的 registry 机制冲突。所以报错。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;CircleCI has rewrite &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https:://github.com&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh://git@github.com:&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.gitconfig&lt;/code&gt;. And this made cargo fail with above error message.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;找到了原因，就可以搞了：&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;machine&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;pre&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sed -i 's/github/git-non-exist-hub/g' ~/.gitconfig&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;pre&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;curl https://sh.rustup.rs -sSf | sh&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;override&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cargo build&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cargo test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;嗯, Ugly but works.&lt;/p&gt;</content><author><name></name></author><category term="blog" /><category term="rust" /><category term="ci" /><summary type="html">最近由于频频遇到 travis-ci 的问题，主要是 Linux 资源排队、macOS 资源更需要排队，导致自动测试时间被拉长， 影响开发效率。</summary></entry><entry><title type="html">折腾 Raspberry Pi + HomeKit 手记</title><link href="https://andelf.github.io/blog/2016/09/16/play-homekit-with-ios-10-and-raspberry-pi/" rel="alternate" type="text/html" title="折腾 Raspberry Pi + HomeKit 手记" /><published>2016-09-16T20:34:43+08:00</published><updated>2016-09-16T20:34:43+08:00</updated><id>https://andelf.github.io/blog/2016/09/16/play-homekit-with-ios-10-and-raspberry-pi</id><content type="html" xml:base="https://andelf.github.io/blog/2016/09/16/play-homekit-with-ios-10-and-raspberry-pi/">&lt;p&gt;9月14日凌晨苹果终于推送了 iOS 10 的更新。从之前发布会来看，并没有多少亮点，除了几天的新鲜感之外，
尤其是对于目前还在用上两代机型的我来说，2333。&lt;/p&gt;

&lt;p&gt;两年前苹果发布 Swift 语言的同时，新增了 HomeKit，当时用工具 dump 过最老版本的 Swift 声明。传送门：&lt;a href=&quot;https://github.com/andelf/Defines-Swift/blob/6a8cda2e12bf6e5a23979a1ad121e70a0eeef6dd/HomeKit.swift&quot;&gt;HomeKit.swift&lt;/a&gt;。目前所有官方相关的资料位于 &lt;a href=&quot;http://www.apple.com/ios/home/&quot;&gt;HomeKit - Apple&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;好消息是期待很久的 HomeKit 应用终于上线，屏幕上多了“家庭(Home)”应用，控制中心（从屏幕下方滑动）、
Siri 均对此有支持。
iOS 10 终于强化了推出已有两年智能家居平台，提供了官方 App，有不少硬件厂商支持。&lt;/p&gt;

&lt;p&gt;简单说，HomeKit 就是苹果官方的智能家居平台解决方案，包括移动设备 SDK，智能家居硬件通信协议(HAP: HomeKit Accessory Protocol)、以及 MFi(Made for iPhone/iPod/iPad) 认证等等。通过 WiFi 或蓝牙连接智能家居设备（或 bridge 设备），也可以利用 Apple TV(4代) 或闲家中的置 iPad 实现设备的远程控制（HAP over iCloud）。&lt;/p&gt;

&lt;p&gt;Home App 的维度划分：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Home: 家，和地理位置绑定，支持共享给好友控制。&lt;/li&gt;
  &lt;li&gt;Room: 房间，用于对设备进行分组。&lt;/li&gt;
  &lt;li&gt;Scene: 场景，一组对设备的配置，例如“起床”，那么可能的配置是打开卧室灯、窗帘、放段舒缓music等等。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;众所周知苹果是卖数据线等硬件的公司（嗯，假设你数据线也坏过不少），HAP 协议部分是需要加入 MFi Program 才能获取文档，而且 MFi Program 无法以个人开发者身份加入。&lt;/p&gt;

&lt;p&gt;好在有好心人逆向了 HAP 的服务端协议（对于智能硬件来说，硬件是服务端，手机App是客户端）。&lt;/p&gt;

&lt;p&gt;对于折腾党来说，机会来了，自己动手改造家居！本文不涉及 App 开发，只涉及如何自制支持 HomeKit 的设备。&lt;/p&gt;

&lt;h2 id=&quot;准备工作&quot;&gt;准备工作&lt;/h2&gt;

&lt;p&gt;设备列表：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;iPhone 6P (iOS 10)&lt;/li&gt;
  &lt;li&gt;Raspberry Pi 3 (Debian jessie)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;考察了两个比较靠谱的 HAP 实现：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;https://github.com/KhaosT/HAP-NodeJS&lt;/li&gt;
  &lt;li&gt;https://github.com/brutella/hc (golang)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最终选择使用 golang 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;brutella/hc&lt;/code&gt;，准备环境。&lt;/p&gt;

&lt;p&gt;需要保证树莓派和手机位于统一子网，因为 HAP 底层是基于 Apple mDNS(RFC 6762)。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;brutella/hc&lt;/code&gt; 要求 golang &amp;gt;= 1.4，而 Debian jessie 版本较低，
需要配置 jessie-backports 源：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;deb ftp://ftp.cn.debian.org/debian jessie-backports main contrib non-free
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;同时导入源的 GPG Key。方法参考 &lt;a href=&quot;http://raspberrypi.stackexchange.com/questions/12258/where-is-the-archive-key-for-backports-debian-org&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;安装好 golang 1.6.2，建立开发目录。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 似乎直接 install golang 会出点小问题，所以折衷用了如下方法:&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; jessie-backports golang-1.6 golang-1.6-go golang-1.6-src golang-1.6-doc
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; jessie-backports golang
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;示例&quot;&gt;示例&lt;/h2&gt;

&lt;p&gt;跑通官方示例代码：&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
	&lt;span class=&quot;s&quot;&gt;&quot;github.com/brutella/hc&quot;&lt;/span&gt;
	&lt;span class=&quot;s&quot;&gt;&quot;github.com/brutella/hc/accessory&quot;&lt;/span&gt;
	&lt;span class=&quot;s&quot;&gt;&quot;log&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accessory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;         &lt;span class=&quot;s&quot;&gt;&quot;Lamp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;SerialNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;051AC-23AAM1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;Manufacturer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Apple&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;        &lt;span class=&quot;s&quot;&gt;&quot;AB&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accessory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewSwitch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Switch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;On&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OnValueRemoteUpdate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Client changed switch to on&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Client changed switch to off&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;00102003&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewIPTransport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Accessory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fatal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;hc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OnTermination&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;编译执行.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ AppleHome&amp;gt; # current dir

$ AppleHome&amp;gt; go get
...

$ AppleHome&amp;gt; go build
...

$ AppleHome&amp;gt; ./AppleHome
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;随后打开手机的 Home App，添加设备，选择 Lamp，输入 PIN 00102003，完成配对，即可使用。&lt;/p&gt;

&lt;h2 id=&quot;自定义设备&quot;&gt;自定义设备&lt;/h2&gt;

&lt;p&gt;树莓派外接小音箱一只，用来放电台，尝试用 HomeKit 控制树莓派的禁音。命令：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;amixer set PCM on
amixer set PCM off
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;代码：&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;os/exec&quot;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;github.com/brutella/hc&quot;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;github.com/brutella/hc/accessory&quot;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;log&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accessory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;            &lt;span class=&quot;s&quot;&gt;&quot;Radio&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;SerialNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;051AC-23AAM2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;Manufacturer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Apple&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;          &lt;span class=&quot;s&quot;&gt;&quot;RPI3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accessory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewSwitch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Switch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;On&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OnValueRemoteUpdate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Toggled PCM!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;amixer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;set&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;PCM&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;on&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Client changed switch to on&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;amixer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;set&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;PCM&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;off&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Client changed switch to off&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;00102004&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewIPTransport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Accessory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fatal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;hc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OnTermination&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;其他&quot;&gt;其他&lt;/h2&gt;

&lt;p&gt;HAP 将智能家居分为以下维度：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Accessory: 单个设备，例如开关，温度计，调节器&lt;/li&gt;
  &lt;li&gt;Service: 一组值，合起来提供服务，例如中央空调（调节温度，风速等等）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;TODO&lt;/p&gt;</content><author><name></name></author><category term="blog" /><category term="ios" /><summary type="html">9月14日凌晨苹果终于推送了 iOS 10 的更新。从之前发布会来看，并没有多少亮点，除了几天的新鲜感之外， 尤其是对于目前还在用上两代机型的我来说，2333。</summary></entry><entry><title type="html">Swift 3.0 尝试——从入门到再学一门(A Glimpse of Swift 3.0)</title><link href="https://andelf.github.io/blog/2016/04/28/a-glimpse-of-swift-3-dot-0/" rel="alternate" type="text/html" title="Swift 3.0 尝试——从入门到再学一门(A Glimpse of Swift 3.0)" /><published>2016-04-28T10:06:53+08:00</published><updated>2016-04-28T10:06:53+08:00</updated><id>https://andelf.github.io/blog/2016/04/28/a-glimpse-of-swift-3-dot-0</id><content type="html" xml:base="https://andelf.github.io/blog/2016/04/28/a-glimpse-of-swift-3-dot-0/">&lt;p&gt;安装工具&lt;/p&gt;

&lt;p&gt;https://github.com/kylef/swiftenv&lt;/p&gt;

&lt;h2 id=&quot;swift-30-新变化&quot;&gt;Swift 3.0 新变化&lt;/h2&gt;

&lt;p&gt;以下内容来自 Swift 语言提案&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;Swift 3.0 发布计划&lt;/p&gt;

&lt;h3 id=&quot;swift-package-system&quot;&gt;Swift Package System&lt;/h3&gt;

&lt;p&gt;https://github.com/donald-pinckney/swift-packages&lt;/p&gt;

&lt;h2 id=&quot;ast-结构&quot;&gt;AST 结构&lt;/h2&gt;

&lt;p&gt;代码位于 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;include/swift/AST&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib/AST&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;ModuleDecl
模块（单个库或是可执行文件）。编译的最小单元，由多个文件组成。&lt;/p&gt;

&lt;p&gt;FileUnit（抽象类）
文件作用域，是代码组织的最小单元。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;DerivedFileUnit: A container for a module-level definition derived as part of an implicit protocol conformance.&lt;/li&gt;
  &lt;li&gt;SourceFile: A file containing Swift source code. .swift 或 .sil 也可以是虚拟 REPL
    &lt;ul&gt;
      &lt;li&gt;Imports: Vec&amp;lt;(ImportedModule, ImportOptions)&amp;gt;&lt;/li&gt;
      &lt;li&gt;Identifier&lt;/li&gt;
      &lt;li&gt;Decls: Vec&lt;Decl&gt;&lt;/Decl&gt;&lt;/li&gt;
      &lt;li&gt;LocalTypeDecl: Vec&lt;TypeDecl&gt;&lt;/TypeDecl&gt;&lt;/li&gt;
      &lt;li&gt;ObjCMethods: Map&amp;lt;ObjCSelector, AbstractFunctionDecl&amp;gt;&lt;/li&gt;
      &lt;li&gt;infix, postfix, prefix operators: OperatorMap&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;BuiltinUnit&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;swift-命令入口&quot;&gt;swift 命令入口&lt;/h2&gt;

&lt;p&gt;入口函数 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tools/driver/driver.cpp&lt;/code&gt;，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; 函数。&lt;/p&gt;

&lt;p&gt;集成多个子工具。同时若 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PATH&lt;/code&gt; 下有名为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;swift-foobar&lt;/code&gt; 的可执行文件，则可通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;swift foobar&lt;/code&gt; 调用。&lt;/p&gt;

&lt;h3 id=&quot;编译器前端-swift--frontend&quot;&gt;编译器前端 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;swift -frontend&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;编译。同时支持打印出各种编译时中间结果。&lt;/p&gt;

&lt;h3 id=&quot;api-notes-功能-swift--apinotes&quot;&gt;API Notes 功能 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;swift -apinotes&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;参考信息位于 &lt;a href=&quot;https://github.com/apple/swift/tree/master/apinotes&quot;&gt;https://github.com/apple/swift/tree/master/apinotes&lt;/a&gt; .&lt;/p&gt;

&lt;p&gt;简单说，API Notes 机制就是通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.apinotes&lt;/code&gt; 文件（YAML格式）描述 Objective-C Framework 和对应 Swift API 的关系。最终生成 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.apinotesc&lt;/code&gt; 文件，与 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.swiftmodule&lt;/code&gt; 文件一起作为 Swift 的模块。&lt;/p&gt;

&lt;p&gt;主要功能包括且不限于：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SwiftBridge&lt;/code&gt;：设置对应的 Bridge 类型，例如 NSArray 对应与 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Swift.Array&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Nullability&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NullabilityOfRet&lt;/code&gt;： 类的属性、方法的参数、返回值对应类型是否可以为 null，即对应与 Swift 的 T 还是 T?&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Availability&lt;/code&gt;：方法是否在 Swift 中暴露，并给出 availability message&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SwiftName&lt;/code&gt;：方法 Selector 在 Swift 中的重命名，例如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;filteredArrayUsingPredicate:&lt;/code&gt; 替换为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;filtered(using:)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Dump 为YAML文件：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$&amp;gt; swift -apinotes -binary-to-yaml /path/to/lib/swift/macosx/x86_64/Dispatch.apinotesc -o=-
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;module-wrap-工具-swift--modulewrap&quot;&gt;Module Wrap 工具 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;swift -modulewrap&lt;/code&gt;&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Wraps .swiftmodule files inside an object file container so they
// can be passed to the linker directly. Mostly useful for platforms
// where the debug info typically stays in the executable.
// (ie. ELF-based platforms).
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;用法：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;swift -modulewrap ObjectiveC.swiftmodule -o objc.o
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;实际发现是在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.o&lt;/code&gt; 里定义了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;___Swift_AST&lt;/code&gt; 符号。&lt;/p&gt;

&lt;h3 id=&quot;repl&quot;&gt;REPL&lt;/h3&gt;

&lt;p&gt;Swift 提供了两个 REPL(Read-Evaluate-Print Loop)，一个是 Swift 本身内置，另一个集成到了 lldb 命令行下。前者只有基本功能，即将废弃，后者功能更强大。&lt;/p&gt;

&lt;p&gt;子命令分别是：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;swift -deprecated-integrated-repl&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;swift -lldb-repl&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;swift -repl&lt;/code&gt; 子命令选择可用的 REPL 进入，一般是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lldb-repl&lt;/code&gt;，除非找不到 lldb 时。这也是 Swift 命令不带任何参数的默认行为。&lt;/p&gt;
&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;(apple/swift-evolution)[https://github.com/apple/swift-evolution] &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name></name></author><category term="blog" /><category term="swift" /><summary type="html">安装工具</summary></entry><entry><title type="html">Rust Pattern Match(Rust中的模式匹配)</title><link href="https://andelf.github.io/blog/2016/03/22/rust-pattern-match/" rel="alternate" type="text/html" title="Rust Pattern Match(Rust中的模式匹配)" /><published>2016-03-22T23:35:19+08:00</published><updated>2016-03-22T23:35:19+08:00</updated><id>https://andelf.github.io/blog/2016/03/22/rust-pattern-match</id><content type="html" xml:base="https://andelf.github.io/blog/2016/03/22/rust-pattern-match/">&lt;h1 id=&quot;模式匹配&quot;&gt;模式匹配&lt;/h1&gt;

&lt;p&gt;汉语字典中对“模式”的解释是：事物的标准样式。在计算机科学中，它指特定类型的数据（往往是序列或是树形结构）满足某一特定结构或格式。“匹配”本身是指一个判断寻找过程。最早的模式匹配用于文本编辑器中的正则字符串搜索，之后才作为编程语言特性。&lt;/p&gt;

&lt;h2 id=&quot;模式匹配基础&quot;&gt;模式匹配基础&lt;/h2&gt;

&lt;p&gt;模式匹配在计算机科学领域有两层意思。其一，可以特指字符串匹配算法，例如为人熟知的 KMP 字符串匹配算法、命令行工具 grep 等。
其二，特指在一些语言中作为一种以结构的方式处理数据的工具，此时的匹配过程往往是树形匹配，与此相伴的往往还有一个特性叫 guard（守卫）。&lt;/p&gt;

&lt;p&gt;Rust 中模式匹配随处可见，例如在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;let&lt;/code&gt;变量绑定语句、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;match&lt;/code&gt;匹配语句中等。利用好模式匹配这一特性可以使代码更简洁易懂。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Rust&lt;/code&gt;支持模式匹配中的变量绑定、结构体/元组解构、守卫条件判断、数值范围匹配等特性。&lt;/p&gt;

&lt;h3 id=&quot;原始匹配&quot;&gt;原始匹配&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;match&lt;/code&gt; 语句中可以直接匹配字面常量，下划线&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_&lt;/code&gt;匹配任意情形。&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;one&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;two&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;three&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;anything&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;以上代码会打印出&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;one&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&quot;结构匹配&quot;&gt;结构匹配&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;match&lt;/code&gt; 用于匹配一个表达式的值，寻找满足条件的子分支(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;arm&lt;/code&gt;)并执行。每个子分支包含三部分：一系列模式、可选的守卫条件以及主体代码块。&lt;/p&gt;

&lt;h3 id=&quot;多个模式&quot;&gt;多个模式&lt;/h3&gt;

&lt;p&gt;每个子分支可以是多个模式，通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;|&lt;/code&gt; 符号分割：&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;one or two&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;three&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;anything&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;以上代码打印出&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;one or two&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&quot;守卫条件&quot;&gt;守卫条件&lt;/h3&gt;

&lt;p&gt;通过&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt;引入子分支的守卫条件：&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OptionalInt&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;i32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Missing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;OptionalInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nn&quot;&gt;OptionalInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Got an int bigger than five!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;nn&quot;&gt;OptionalInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Got an int!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;nn&quot;&gt;OptionalInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Missing&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;No such luck.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;模式匹配进阶&quot;&gt;模式匹配进阶&lt;/h2&gt;

&lt;p&gt;其实进阶，不如直接从&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libsyntax&lt;/code&gt;源码看看到底模式匹配是如何实现。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;syntax::ast::Pat&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;从AST源码中寻找语法要素屋外户两个要点，其一，语法要素是如何表达为对应AST的；其二，对应AST在哪些父AST中出现。&lt;/p&gt;

&lt;p&gt;Rust中使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;syntax::ast::Pat&lt;/code&gt;枚举来表示一个模式匹配。&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NodeId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PatKind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Span&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PatKind&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// Represents a wildcard pattern (`_`)&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// 表示通配，下划线&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Wild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;/// A `PatKind::Ident` may either be a new bound variable,&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// or a unit struct/variant pattern, or a const pattern (in the last two cases&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// the third field must be `None`).&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;///&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// In the unit or const pattern case, the parser can't determine&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// which it is. The resolver determines this, and&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// records this pattern's `NodeId` in an auxiliary&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// set (of &quot;PatIdents that refer to unit patterns or constants&quot;).&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Ident&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BindingMode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SpannedIdent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;/// A struct or struct variant pattern, e.g. `Variant {x, y, ..}`.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// The `bool` is `true` in the presence of a `..`.&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Spanned&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FieldPat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;/// A tuple struct/variant pattern `Variant(x, y, z)`.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// &quot;None&quot; means a `Variant(..)` pattern where we don't bind the fields to names.&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;TupleStruct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;/// A path pattern.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// Such pattern can be resolved to a unit struct/variant or a constant.&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;/// An associated const named using the qualified path `&amp;lt;T&amp;gt;::CONST` or&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// `&amp;lt;T as Trait&amp;gt;::CONST`. Associated consts from inherent impls can be&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// referred to as simply `T::CONST`, in which case they will end up as&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// PatKind::Path, and the resolver will have to sort that out.&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;QPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QSelf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;/// A tuple pattern `(a, b)`&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Tup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// A `box` pattern&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// A reference pattern, e.g. `&amp;amp;mut (a, b)`&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Ref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mutability&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// A literal&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Lit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// A range pattern, e.g. `1...2`&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// `[a, b, ..i, y, z]` is represented as:&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;///     `PatKind::Vec(box [a, b], Some(i), box [y, z])`&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// A macro pattern; pre-expansion&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Mac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Mac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;以上AST定义，即说明，到底什么被认为是一个“模式”。&lt;/p&gt;

&lt;p&gt;以下介绍&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pat&lt;/code&gt;在哪些AST中出现。&lt;/p&gt;

&lt;h3 id=&quot;全局-item&quot;&gt;全局 Item&lt;/h3&gt;

&lt;p&gt;全局 Item 中，使用模式匹配的均为函数参数。&lt;/p&gt;

&lt;h4 id=&quot;itemkindfn&quot;&gt;ItemKind::Fn&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Fn&lt;/code&gt; 全局函数 -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FnDecl&lt;/code&gt; 函数声明 -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[Arg]&lt;/code&gt; 函数头参数声明。&lt;/p&gt;

&lt;h4 id=&quot;itemkindtrait&quot;&gt;ItemKind::Trait&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Trait&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[TraitItem]&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TraitItemKind::Method&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MethodSig&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FnDecl&lt;/code&gt; 方法声明，同上。&lt;/p&gt;

&lt;h4 id=&quot;itemkindimpl&quot;&gt;ItemKind::Impl&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Impl&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[ImplItem]&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ImplItemKind::Method&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MethodSig&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FnDecl&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&quot;aststmt-语句&quot;&gt;ast::Stmt 语句&lt;/h3&gt;

&lt;h4 id=&quot;stmtkinddecl&quot;&gt;StmtKind::Decl&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Decl&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DeclKind::Local&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;即 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;let&lt;/code&gt; 语句 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;let &amp;lt;pat&amp;gt;:&amp;lt;ty&amp;gt; = &amp;lt;expr&amp;gt;;&lt;/code&gt;。&lt;/p&gt;

&lt;h4 id=&quot;stmtkindexpr-表达式&quot;&gt;StmtKind::Expr 表达式&lt;/h4&gt;

&lt;p&gt;见下。&lt;/p&gt;

&lt;h3 id=&quot;astexpr&quot;&gt;ast::Expr&lt;/h3&gt;

&lt;p&gt;除&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;match&lt;/code&gt;外，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if let&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;while let&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;for&lt;/code&gt;控制语句支持同时进行模式匹配。具体实现是一种&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;desugared&lt;/code&gt;过程，即，去语法糖化。&lt;/p&gt;

&lt;p&gt;同时类似于函数定义，闭包参数也支持模式匹配。&lt;/p&gt;

&lt;h4 id=&quot;if-let&quot;&gt;if let&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IfLet(P&amp;lt;Pat&amp;gt;, P&amp;lt;Expr&amp;gt;, P&amp;lt;Block&amp;gt;, Option&amp;lt;P&amp;lt;Expr&amp;gt;&amp;gt;)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if let pat = expr { block } else { expr }&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This is desugared to a match expression.&lt;/p&gt;

&lt;h4 id=&quot;while-let&quot;&gt;while let&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WhileLet(P&amp;lt;Pat&amp;gt;, P&amp;lt;Expr&amp;gt;, P&amp;lt;Block&amp;gt;, Option&amp;lt;Ident&amp;gt;)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'label: while let pat = expr { block }&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;for&quot;&gt;for&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ForLoop(P&amp;lt;Pat&amp;gt;, P&amp;lt;Expr&amp;gt;, P&amp;lt;Block&amp;gt;, Option&amp;lt;Ident&amp;gt;)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'label: for pat in expr { block }&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;match&quot;&gt;match&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Match(P&amp;lt;Expr&amp;gt;, Vec&amp;lt;Arm&amp;gt;)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;match&lt;/code&gt; 语句，在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arm&lt;/code&gt; 中出现，其中 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arm&lt;/code&gt; 定义为&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pub struct Arm {
    pub attrs: Vec&amp;lt;Attribute&amp;gt;,
    pub pats: Vec&amp;lt;P&amp;lt;Pat&amp;gt;&amp;gt;,
    pub guard: Option&amp;lt;P&amp;lt;Expr&amp;gt;&amp;gt;,
    pub body: P&amp;lt;Expr&amp;gt;,
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;闭包&quot;&gt;闭包&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Closure(CaptureBy, P&amp;lt;FnDecl&amp;gt;, P&amp;lt;Block&amp;gt;)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;闭包，例如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;move |a, b, c| {a + b + c}&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&quot;相关-feature-gate&quot;&gt;相关 feature gate&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;advanced_slice_patterns&lt;/code&gt; - See the match expressions section for discussion; the exact semantics of slice patterns are subject to change, so some types are still unstable.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;slice_patterns&lt;/code&gt; - OK, actually, slice patterns are just scary and completely unstable.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;box_patterns&lt;/code&gt; - Allows box patterns, the exact semantics of which is subject to change.&lt;/p&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;

&lt;p&gt;https://doc.rust-lang.org/book/patterns.html&lt;/p&gt;</content><author><name></name></author><category term="blog" /><category term="rust" /><summary type="html">模式匹配</summary></entry><entry><title type="html">广州实时工具App逆向</title><link href="https://andelf.github.io/blog/2015/06/18/guangzhou-realtime-bus/" rel="alternate" type="text/html" title="广州实时工具App逆向" /><published>2015-06-18T17:39:06+08:00</published><updated>2015-06-18T17:39:06+08:00</updated><id>https://andelf.github.io/blog/2015/06/18/guangzhou-realtime-bus</id><content type="html" xml:base="https://andelf.github.io/blog/2015/06/18/guangzhou-realtime-bus/">&lt;p&gt;简记。用了 IDA Pro，安卓手机的 Remote 客户端。以及 apktool 等。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/andelf/guangzhou-realtime-bus&quot;&gt;Github: guangzhou-realtime-bus&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;生成 e=3 的 1024 位 RSA 密钥对&lt;/li&gt;
  &lt;li&gt;公钥串用查表加密(byte 映射)，然后 base64 封装发送给服务器&lt;/li&gt;
  &lt;li&gt;服务器返回一串用公钥加密过的数据&lt;/li&gt;
  &lt;li&gt;用本地私钥解密后，该数据包含未知96字节的一段数据和 DES Key&lt;/li&gt;
  &lt;li&gt;从此通信用 DES 加密&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;base64封装过程：先打包字符串长度，然后是原始字符串（JSON），然后是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x10&lt;/code&gt;(md5字符串长度)，
然后是 md5 校验值。整个二进制字符串用 base64 转码，POST 给服务器。&lt;/p&gt;

&lt;p&gt;具体的登录注册过程还需要进一步抓包分析，不过暂时兴趣不在这里了。&lt;/p&gt;</content><author><name></name></author><category term="blog" /><category term="crack" /><summary type="html">简记。用了 IDA Pro，安卓手机的 Remote 客户端。以及 apktool 等。</summary></entry><entry><title type="html">Swift 2.0 的错误处理(Swift 2.0 Error Handling)</title><link href="https://andelf.github.io/blog/2015/06/09/swift-2-dot-0-error-handling/" rel="alternate" type="text/html" title="Swift 2.0 的错误处理(Swift 2.0 Error Handling)" /><published>2015-06-09T15:27:58+08:00</published><updated>2015-06-09T15:27:58+08:00</updated><id>https://andelf.github.io/blog/2015/06/09/swift-2-dot-0-error-handling</id><content type="html" xml:base="https://andelf.github.io/blog/2015/06/09/swift-2-dot-0-error-handling/">&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;protocol ErrorType {
  var _domain: String { get }
  var _code: Int { get }
}

@asmname(&quot;swift_bridgeErrorTypeToNSError&quot;) func _bridgeErrorTypeToNSError(e: ErrorType) -&amp;gt; AnyObject

@asmname(&quot;swift_stdlib_getErrorCode&quot;) func _stdlib_getErrorCode&amp;lt;T : ErrorType&amp;gt;(x: UnsafePointer&amp;lt;T&amp;gt;) -&amp;gt; Int

@asmname(&quot;swift_stdlib_getErrorDomainNSString&quot;) func _stdlib_getErrorDomainNSString&amp;lt;T : ErrorType&amp;gt;(x: UnsafePointer&amp;lt;T&amp;gt;) -&amp;gt; AnyObject
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;foundation&quot;&gt;Foundation&lt;/h2&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;protocol _ObjectiveCBridgeableErrorType : ErrorType {
  init?(_bridgedNSError: NSError)
}

struct NSCocoaError : RawRepresentable, _BridgedNSError, _ObjectiveCBridgeableErrorType, ErrorType, __BridgedNSError, Hashable, Equatable {
  let rawValue: Int
  init(rawValue: Int)
  static var _NSErrorDomain: String {
    get {}
  }
  typealias RawValue = Int
}


infix func ==(a: _GenericObjCError, b: _GenericObjCError) -&amp;gt; Bool
infix func ==(a: _GenericObjCError, b: _GenericObjCError) -&amp;gt; Bool
func ==&amp;lt;T : __BridgedNSError where T.RawValue : SignedIntegerType&amp;gt;(lhs: T, rhs: T) -&amp;gt; Bool

@available(OSX 10.11, iOS 9.0, *)
func resolveError(error: NSError?) throws

enum _GenericObjCError : ErrorType {
  case NilError
  var hashValue: Int {
    get {}
  }
  var _domain: String {
    get {}
  }
  var _code: Int {
    get {}
  }
}

@asmname(&quot;swift_stdlib_bridgeNSErrorToErrorType&quot;)
func _stdlib_bridgeNSErrorToErrorType&amp;lt;T : _ObjectiveCBridgeableErrorType&amp;gt;(error: NSError, out: UnsafeMutablePointer&amp;lt;T&amp;gt;) -&amp;gt; Bool

@asmname(&quot;swift_convertNSErrorToErrorType&quot;) func _convertNSErrorToErrorType(error: NSError?) -&amp;gt; ErrorType

@objc enum NSURLError : Int, _BridgedNSError, _ObjectiveCBridgeableErrorType, ErrorType, __BridgedNSError { ... }


protocol __BridgedNSError : RawRepresentable {
  static var _NSErrorDomain: String { get }
}
@asmname(&quot;swift_convertErrorTypeToNSError&quot;) func _convertErrorTypeToNSError(error: ErrorType) -&amp;gt; NSError
func ~=(match: NSCocoaError, error: ErrorType) -&amp;gt; Bool
protocol _BridgedNSError : __BridgedNSError, _ObjectiveCBridgeableErrorType, Hashable {
  static var _NSErrorDomain: String { get }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ErrorType 在 Swift 中表示。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;extension NSError : ErrorType {
  @objc dynamic var _domain: String {
    @objc dynamic get {}
  }
  @objc dynamic var _code: Int {
    @objc dynamic get {}
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="blog" /><category term="swift" /><summary type="html">``` protocol ErrorType { var _domain: String { get } var _code: Int { get } }</summary></entry><entry><title type="html">北京实时公交分析</title><link href="https://andelf.github.io/blog/2015/06/01/beijing-realtime-bus/" rel="alternate" type="text/html" title="北京实时公交分析" /><published>2015-06-01T13:17:50+08:00</published><updated>2015-06-01T13:17:50+08:00</updated><id>https://andelf.github.io/blog/2015/06/01/beijing-realtime-bus</id><content type="html" xml:base="https://andelf.github.io/blog/2015/06/01/beijing-realtime-bus/">&lt;p&gt;361 条线路，705条单向线路。 aibang 负责数据服务。&lt;/p&gt;

&lt;p&gt;每辆车，每15秒更新一次 GPS，&lt;/p&gt;

&lt;p&gt;整理成为 Repo &lt;a href=&quot;https://github.com/andelf/beijing-realtime-bus&quot;&gt;andelf/beijing-realtime-bus&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><category term="blog" /><summary type="html">361 条线路，705条单向线路。 aibang 负责数据服务。</summary></entry></feed>